
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEMODULOFLOORrightUMINUSDIVIDE EQUALS FLOOR LPAREN MINUS MODULO NAME NUMBER PLUS RPAREN TIMESstatement : NAME EQUALS expressionstatement : expressionexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression MODULO expression\n| expression FLOOR expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAME'
    
_lr_action_items = {'NAME':([0,4,5,7,8,9,10,11,12,13,],[2,15,15,15,15,15,15,15,15,15,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,],[4,-12,9,4,4,-11,4,4,4,4,4,4,4,-9,-12,9,9,-3,-4,-5,-6,-7,-8,-10,]),'LPAREN':([0,4,5,7,8,9,10,11,12,13,],[5,5,5,5,5,5,5,5,5,5,]),'NUMBER':([0,4,5,7,8,9,10,11,12,13,],[6,6,6,6,6,6,6,6,6,6,]),'$end':([1,2,3,6,14,15,17,18,19,20,21,22,23,24,],[0,-12,-2,-11,-9,-12,-1,-3,-4,-5,-6,-7,-8,-10,]),'EQUALS':([2,],[7,]),'PLUS':([2,3,6,14,15,16,17,18,19,20,21,22,23,24,],[-12,8,-11,-9,-12,8,8,-3,-4,-5,-6,-7,-8,-10,]),'TIMES':([2,3,6,14,15,16,17,18,19,20,21,22,23,24,],[-12,10,-11,-9,-12,10,10,10,10,-5,-6,-7,-8,-10,]),'DIVIDE':([2,3,6,14,15,16,17,18,19,20,21,22,23,24,],[-12,11,-11,-9,-12,11,11,11,11,-5,-6,-7,-8,-10,]),'MODULO':([2,3,6,14,15,16,17,18,19,20,21,22,23,24,],[-12,12,-11,-9,-12,12,12,12,12,-5,-6,-7,-8,-10,]),'FLOOR':([2,3,6,14,15,16,17,18,19,20,21,22,23,24,],[-12,13,-11,-9,-12,13,13,13,13,-5,-6,-7,-8,-10,]),'RPAREN':([6,14,15,16,18,19,20,21,22,23,24,],[-11,-9,-12,24,-3,-4,-5,-6,-7,-8,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,4,5,7,8,9,10,11,12,13,],[3,14,16,17,18,19,20,21,22,23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NAME EQUALS expression','statement',3,'p_statement_assign','calc.py',66),
  ('statement -> expression','statement',1,'p_statement_expr','calc.py',70),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','calc.py',74),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','calc.py',75),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','calc.py',76),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','calc.py',77),
  ('expression -> expression MODULO expression','expression',3,'p_expression_binop','calc.py',78),
  ('expression -> expression FLOOR expression','expression',3,'p_expression_binop','calc.py',79),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','calc.py',88),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','calc.py',92),
  ('expression -> NUMBER','expression',1,'p_expression_number','calc.py',96),
  ('expression -> NAME','expression',1,'p_expression_name','calc.py',100),
]
